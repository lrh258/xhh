概要部分
代码能符合需求和规格说明：采用了java进行编程，代码书写基本规范，函数和变量的命名也符合命名习惯。
代码设计是否周全：代码在设计上面完成了项目要求的各个功能，在设计上还是比较严谨的；但是代码周全与否也不是绝对的，也会因为我们考虑不到的问题存在一些未知漏洞。
代码可读性如何：代码考虑到了可读性的问题，在各个函数前加上了简单地注释，使得代码的可读性比较强。
代码是否容易维护：代码的封装良好，模块清晰，比较容易维护。
代码是否逐行执行和检查：是
设计规范部分
设计是否遵从已知的设计模式或项目中常用的模式：代码采用了java编程，连接mysql数据库的常见模式。没有采用GUI页面，而是选择控制台输出。
有没有硬编码或字符串/数字等存在：有一部分
代码有没有依赖于某一平台，是否会影响将来的移植（如Win32到Win64）：代码不依赖于平台，不影响可移植性，但是对jar包的版本有要求。过高或过低都不适合。
开发者新写的代码能否用已有的Library/SDK/Framework中的功能实现；在本项目中是否存在类似的功能可以调用而不用全部重新实现：可以实现，代码中涉及了一部分查询、添加函数，若要实现类似功能，可以进行调用。
有没有无用的代码可以清除：对方在开发过程中已经尽可能的删除了无用的可注释代码，并未留下过多无用代码。
代码规范部分
修改的部分符合代码标准和风格:修改代码尽量与开发者靠近，基本符合代码的标准和风格。
具体代码部分
有没有对错误进行处理；对于调用的外部函数，是否检查了返回值或处理了异常：代码有一定的容错能力，也检查值和进行了异常处理
参数传递有无错误，字符串的长度是字节的长度还是字符（可能是单/双字节）的长度，是以0开始计数还是以1开始计数：参数传递没有错误，字符串的长度是字节的长度，以0开始计数
边界条件是如何处理的？Switch语句的Default是如何处理的？循环有没有可能出现死循环？
通过百度查询和书上的知识，或者问同学解决的，循环不会出现死循环
有没有使用断言（Assert）来保证我们认为不变的条件真的满足：没有使用
对资源的利用，是在哪里申请，在哪里释放的？有没有可能导致资源泄露（内存、文件、各种GUI资源、数据库访问的连接，等等）？有没有可能优化？在网上找到的，不会导致资源泄漏
数据结构中是否有无用的元素？检查过后没有
效能
代码的效能（Performance）如何？最坏的情况是怎样的：代码正确，程序运行正常，用户输入有误时，程序会输出标志性语句。
代码中，特别是循环中是否有明显可优化的部分（C++中反复创建类，C#中 string 的操作是否能用StringBuilder 来优化）：有可优化部分，但是代码正确所以没有修改
代码可读性如何；有没有足够的注释：对方在开发过程中添加量相当一部分的注释，程序的可读性很高。
可测试性
代码是否需要更新或创建新的单元测试：项目相对来说是一个小型的个人项目，没有必要做单元测试。